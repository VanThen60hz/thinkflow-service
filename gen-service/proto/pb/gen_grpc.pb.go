// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/gen.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TranscriptService_GetTranscriptById_FullMethodName = "/pb.TranscriptService/GetTranscriptById"
	TranscriptService_CreateTranscript_FullMethodName  = "/pb.TranscriptService/CreateTranscript"
)

// TranscriptServiceClient is the client API for TranscriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscriptServiceClient interface {
	GetTranscriptById(ctx context.Context, in *GetTranscriptByIdReq, opts ...grpc.CallOption) (*PublicTranscriptInfoResp, error)
	CreateTranscript(ctx context.Context, in *CreateTranscriptReq, opts ...grpc.CallOption) (*NewTranscriptIdResp, error)
}

type transcriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriptServiceClient(cc grpc.ClientConnInterface) TranscriptServiceClient {
	return &transcriptServiceClient{cc}
}

func (c *transcriptServiceClient) GetTranscriptById(ctx context.Context, in *GetTranscriptByIdReq, opts ...grpc.CallOption) (*PublicTranscriptInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicTranscriptInfoResp)
	err := c.cc.Invoke(ctx, TranscriptService_GetTranscriptById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) CreateTranscript(ctx context.Context, in *CreateTranscriptReq, opts ...grpc.CallOption) (*NewTranscriptIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTranscriptIdResp)
	err := c.cc.Invoke(ctx, TranscriptService_CreateTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriptServiceServer is the server API for TranscriptService service.
// All implementations should embed UnimplementedTranscriptServiceServer
// for forward compatibility.
type TranscriptServiceServer interface {
	GetTranscriptById(context.Context, *GetTranscriptByIdReq) (*PublicTranscriptInfoResp, error)
	CreateTranscript(context.Context, *CreateTranscriptReq) (*NewTranscriptIdResp, error)
}

// UnimplementedTranscriptServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranscriptServiceServer struct{}

func (UnimplementedTranscriptServiceServer) GetTranscriptById(context.Context, *GetTranscriptByIdReq) (*PublicTranscriptInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptById not implemented")
}
func (UnimplementedTranscriptServiceServer) CreateTranscript(context.Context, *CreateTranscriptReq) (*NewTranscriptIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranscript not implemented")
}
func (UnimplementedTranscriptServiceServer) testEmbeddedByValue() {}

// UnsafeTranscriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriptServiceServer will
// result in compilation errors.
type UnsafeTranscriptServiceServer interface {
	mustEmbedUnimplementedTranscriptServiceServer()
}

func RegisterTranscriptServiceServer(s grpc.ServiceRegistrar, srv TranscriptServiceServer) {
	// If the following call pancis, it indicates UnimplementedTranscriptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TranscriptService_ServiceDesc, srv)
}

func _TranscriptService_GetTranscriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).GetTranscriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_GetTranscriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).GetTranscriptById(ctx, req.(*GetTranscriptByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_CreateTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranscriptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).CreateTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptService_CreateTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).CreateTranscript(ctx, req.(*CreateTranscriptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscriptService_ServiceDesc is the grpc.ServiceDesc for TranscriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TranscriptService",
	HandlerType: (*TranscriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTranscriptById",
			Handler:    _TranscriptService_GetTranscriptById_Handler,
		},
		{
			MethodName: "CreateTranscript",
			Handler:    _TranscriptService_CreateTranscript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gen.proto",
}

const (
	SummaryService_GetSummaryById_FullMethodName = "/pb.SummaryService/GetSummaryById"
	SummaryService_CreateSummary_FullMethodName  = "/pb.SummaryService/CreateSummary"
)

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetSummaryById(ctx context.Context, in *GetSummaryByIdReq, opts ...grpc.CallOption) (*PublicSummaryInfoResp, error)
	CreateSummary(ctx context.Context, in *CreateSummaryReq, opts ...grpc.CallOption) (*NewSummaryIdResp, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetSummaryById(ctx context.Context, in *GetSummaryByIdReq, opts ...grpc.CallOption) (*PublicSummaryInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicSummaryInfoResp)
	err := c.cc.Invoke(ctx, SummaryService_GetSummaryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) CreateSummary(ctx context.Context, in *CreateSummaryReq, opts ...grpc.CallOption) (*NewSummaryIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewSummaryIdResp)
	err := c.cc.Invoke(ctx, SummaryService_CreateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations should embed UnimplementedSummaryServiceServer
// for forward compatibility.
type SummaryServiceServer interface {
	GetSummaryById(context.Context, *GetSummaryByIdReq) (*PublicSummaryInfoResp, error)
	CreateSummary(context.Context, *CreateSummaryReq) (*NewSummaryIdResp, error)
}

// UnimplementedSummaryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSummaryServiceServer struct{}

func (UnimplementedSummaryServiceServer) GetSummaryById(context.Context, *GetSummaryByIdReq) (*PublicSummaryInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryById not implemented")
}
func (UnimplementedSummaryServiceServer) CreateSummary(context.Context, *CreateSummaryReq) (*NewSummaryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummary not implemented")
}
func (UnimplementedSummaryServiceServer) testEmbeddedByValue() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSummaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetSummaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetSummaryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, req.(*GetSummaryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_CreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_CreateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSummary(ctx, req.(*CreateSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummaryById",
			Handler:    _SummaryService_GetSummaryById_Handler,
		},
		{
			MethodName: "CreateSummary",
			Handler:    _SummaryService_CreateSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gen.proto",
}

const (
	MindmapService_GetMindmapById_FullMethodName = "/pb.MindmapService/GetMindmapById"
	MindmapService_CreateMindmap_FullMethodName  = "/pb.MindmapService/CreateMindmap"
)

// MindmapServiceClient is the client API for MindmapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MindmapServiceClient interface {
	GetMindmapById(ctx context.Context, in *GetMindmapByIdReq, opts ...grpc.CallOption) (*PublicMindmapInfoResp, error)
	CreateMindmap(ctx context.Context, in *CreateMindmapReq, opts ...grpc.CallOption) (*NewMindmapIdResp, error)
}

type mindmapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMindmapServiceClient(cc grpc.ClientConnInterface) MindmapServiceClient {
	return &mindmapServiceClient{cc}
}

func (c *mindmapServiceClient) GetMindmapById(ctx context.Context, in *GetMindmapByIdReq, opts ...grpc.CallOption) (*PublicMindmapInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicMindmapInfoResp)
	err := c.cc.Invoke(ctx, MindmapService_GetMindmapById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mindmapServiceClient) CreateMindmap(ctx context.Context, in *CreateMindmapReq, opts ...grpc.CallOption) (*NewMindmapIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMindmapIdResp)
	err := c.cc.Invoke(ctx, MindmapService_CreateMindmap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MindmapServiceServer is the server API for MindmapService service.
// All implementations should embed UnimplementedMindmapServiceServer
// for forward compatibility.
type MindmapServiceServer interface {
	GetMindmapById(context.Context, *GetMindmapByIdReq) (*PublicMindmapInfoResp, error)
	CreateMindmap(context.Context, *CreateMindmapReq) (*NewMindmapIdResp, error)
}

// UnimplementedMindmapServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMindmapServiceServer struct{}

func (UnimplementedMindmapServiceServer) GetMindmapById(context.Context, *GetMindmapByIdReq) (*PublicMindmapInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMindmapById not implemented")
}
func (UnimplementedMindmapServiceServer) CreateMindmap(context.Context, *CreateMindmapReq) (*NewMindmapIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMindmap not implemented")
}
func (UnimplementedMindmapServiceServer) testEmbeddedByValue() {}

// UnsafeMindmapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MindmapServiceServer will
// result in compilation errors.
type UnsafeMindmapServiceServer interface {
	mustEmbedUnimplementedMindmapServiceServer()
}

func RegisterMindmapServiceServer(s grpc.ServiceRegistrar, srv MindmapServiceServer) {
	// If the following call pancis, it indicates UnimplementedMindmapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MindmapService_ServiceDesc, srv)
}

func _MindmapService_GetMindmapById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMindmapByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MindmapServiceServer).GetMindmapById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MindmapService_GetMindmapById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MindmapServiceServer).GetMindmapById(ctx, req.(*GetMindmapByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MindmapService_CreateMindmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMindmapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MindmapServiceServer).CreateMindmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MindmapService_CreateMindmap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MindmapServiceServer).CreateMindmap(ctx, req.(*CreateMindmapReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MindmapService_ServiceDesc is the grpc.ServiceDesc for MindmapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MindmapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MindmapService",
	HandlerType: (*MindmapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMindmapById",
			Handler:    _MindmapService_GetMindmapById_Handler,
		},
		{
			MethodName: "CreateMindmap",
			Handler:    _MindmapService_CreateMindmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gen.proto",
}
