syntax = "proto3";

package pb;

option go_package = "pb/";

import "google/protobuf/timestamp.proto";

// Collaboration messages
message Collaboration {
    int32 id = 1;
    int32 note_id = 2;
    int32 user_id = 3;
    string permission = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
}

message CollaborationCreation {
    int32 note_id = 1;
    int32 user_id = 2;
    string permission = 3;
}

message CollaborationUpdate {
    string permission = 1;
}

// Request/Response messages
message AddCollaborationRequest {
    CollaborationCreation collaboration = 1;
}

message AddCollaborationResponse {
    bool success = 1;
}

message UpdateCollaborationRequest {
    int32 id = 1;
    CollaborationUpdate collaboration = 2;
}

message UpdateCollaborationResponse {
    bool success = 1;
}

message DeleteCollaborationRequest {
    int32 id = 1;
}

message DeleteCollaborationResponse {
    bool success = 1;
}

message GetCollaborationByNoteIdAndUserIdRequest {
    int32 note_id = 1;
    int32 user_id = 2;
}

message GetCollaborationByNoteIdAndUserIdResponse {
    Collaboration collaboration = 1;
}

message GetCollaborationByNoteIdRequest {
    int32 note_id = 1;
    int32 page = 2;
    int32 limit = 3;
}

message GetCollaborationByNoteIdResponse {
    repeated Collaboration collaborations = 1;
    int32 total = 2;
}

message GetCollaborationByUserIdRequest {
    int32 user_id = 1;
    int32 page = 2;
    int32 limit = 3;
}

message GetCollaborationByUserIdResponse {
    repeated Collaboration collaborations = 1;
    int32 total = 2;
}

message CheckReadPermissionRequest {
    int32 note_id = 1;
    int32 user_id = 2;
}

message CheckReadPermissionResponse {
    bool has_permission = 1;
}

message CheckWritePermissionRequest {
    int32 note_id = 1;
    int32 user_id = 2;
}

message CheckWritePermissionResponse {
    bool has_permission = 1;
}

message RemoveCollaborationByNoteIdAndUserIdRequest {
    int32 note_id = 1;
    int32 user_id = 2;
}

message RemoveCollaborationByNoteIdAndUserIdResponse {
    bool success = 1;
}

// NoteShareLink messages
message NoteShareLink {
    int64 id = 1;
    int32 note_id = 2;
    string token = 3;
    string permission = 4;
    google.protobuf.Timestamp expires_at = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message NoteShareLinkCreation {
    int32 note_id = 1;
    string token = 2;
    string permission = 3;
    google.protobuf.Timestamp expires_at = 4;
}

message NoteShareLinkUpdate {
    string permission = 1;
    google.protobuf.Timestamp expires_at = 2;
}

// NoteShareLink Request/Response messages
message CreateNoteShareLinkRequest {
    NoteShareLinkCreation share_link = 1;
}

message CreateNoteShareLinkResponse {
    NoteShareLink share_link = 1;
}

message GetNoteShareLinkByIDRequest {
    int64 id = 1;
}

message GetNoteShareLinkByTokenRequest {
    string token = 1;
}

message GetNoteShareLinkResponse {
    NoteShareLink share_link = 1;
}

message UpdateNoteShareLinkRequest {
    int64 id = 1;
    NoteShareLinkUpdate share_link = 2;
}

message UpdateNoteShareLinkResponse {
    NoteShareLink share_link = 1;
}

message DeleteNoteShareLinkRequest {
    int64 id = 1;
}

message DeleteNoteShareLinkResponse {
    bool success = 1;
}

// Service definition
service CollaborationService {
    rpc AddCollaboration(AddCollaborationRequest) returns (AddCollaborationResponse);
    rpc UpdateCollaboration(UpdateCollaborationRequest) returns (UpdateCollaborationResponse);
    rpc DeleteCollaboration(DeleteCollaborationRequest) returns (DeleteCollaborationResponse);
    rpc GetCollaborationByNoteIdAndUserId(GetCollaborationByNoteIdAndUserIdRequest) returns (GetCollaborationByNoteIdAndUserIdResponse);
    rpc GetCollaborationByNoteId(GetCollaborationByNoteIdRequest) returns (GetCollaborationByNoteIdResponse);
    rpc GetCollaborationByUserId(GetCollaborationByUserIdRequest) returns (GetCollaborationByUserIdResponse);
    rpc CheckReadPermission(CheckReadPermissionRequest) returns (CheckReadPermissionResponse);
    rpc CheckWritePermission(CheckWritePermissionRequest) returns (CheckWritePermissionResponse);
    rpc RemoveCollaborationByNoteIdAndUserId(RemoveCollaborationByNoteIdAndUserIdRequest) returns (RemoveCollaborationByNoteIdAndUserIdResponse);
}

service NoteShareLinkService {
    rpc CreateNoteShareLink(CreateNoteShareLinkRequest) returns (CreateNoteShareLinkResponse);
    rpc GetNoteShareLinkByID(GetNoteShareLinkByIDRequest) returns (GetNoteShareLinkResponse);
    rpc GetNoteShareLinkByToken(GetNoteShareLinkByTokenRequest) returns (GetNoteShareLinkResponse);
    rpc UpdateNoteShareLink(UpdateNoteShareLinkRequest) returns (UpdateNoteShareLinkResponse);
    rpc DeleteNoteShareLink(DeleteNoteShareLinkRequest) returns (DeleteNoteShareLinkResponse);
} 