// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/collaboration.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollaborationService_AddCollaboration_FullMethodName                     = "/pb.CollaborationService/AddCollaboration"
	CollaborationService_UpdateCollaboration_FullMethodName                  = "/pb.CollaborationService/UpdateCollaboration"
	CollaborationService_DeleteCollaboration_FullMethodName                  = "/pb.CollaborationService/DeleteCollaboration"
	CollaborationService_GetCollaborationByNoteIdAndUserId_FullMethodName    = "/pb.CollaborationService/GetCollaborationByNoteIdAndUserId"
	CollaborationService_GetCollaborationByNoteId_FullMethodName             = "/pb.CollaborationService/GetCollaborationByNoteId"
	CollaborationService_GetCollaborationByUserId_FullMethodName             = "/pb.CollaborationService/GetCollaborationByUserId"
	CollaborationService_CheckReadPermission_FullMethodName                  = "/pb.CollaborationService/CheckReadPermission"
	CollaborationService_CheckWritePermission_FullMethodName                 = "/pb.CollaborationService/CheckWritePermission"
	CollaborationService_RemoveCollaborationByNoteIdAndUserId_FullMethodName = "/pb.CollaborationService/RemoveCollaborationByNoteIdAndUserId"
)

// CollaborationServiceClient is the client API for CollaborationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type CollaborationServiceClient interface {
	AddCollaboration(ctx context.Context, in *AddCollaborationRequest, opts ...grpc.CallOption) (*AddCollaborationResponse, error)
	UpdateCollaboration(ctx context.Context, in *UpdateCollaborationRequest, opts ...grpc.CallOption) (*UpdateCollaborationResponse, error)
	DeleteCollaboration(ctx context.Context, in *DeleteCollaborationRequest, opts ...grpc.CallOption) (*DeleteCollaborationResponse, error)
	GetCollaborationByNoteIdAndUserId(ctx context.Context, in *GetCollaborationByNoteIdAndUserIdRequest, opts ...grpc.CallOption) (*GetCollaborationByNoteIdAndUserIdResponse, error)
	GetCollaborationByNoteId(ctx context.Context, in *GetCollaborationByNoteIdRequest, opts ...grpc.CallOption) (*GetCollaborationByNoteIdResponse, error)
	GetCollaborationByUserId(ctx context.Context, in *GetCollaborationByUserIdRequest, opts ...grpc.CallOption) (*GetCollaborationByUserIdResponse, error)
	CheckReadPermission(ctx context.Context, in *CheckReadPermissionRequest, opts ...grpc.CallOption) (*CheckReadPermissionResponse, error)
	CheckWritePermission(ctx context.Context, in *CheckWritePermissionRequest, opts ...grpc.CallOption) (*CheckWritePermissionResponse, error)
	RemoveCollaborationByNoteIdAndUserId(ctx context.Context, in *RemoveCollaborationByNoteIdAndUserIdRequest, opts ...grpc.CallOption) (*RemoveCollaborationByNoteIdAndUserIdResponse, error)
}

type collaborationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationServiceClient(cc grpc.ClientConnInterface) CollaborationServiceClient {
	return &collaborationServiceClient{cc}
}

func (c *collaborationServiceClient) AddCollaboration(ctx context.Context, in *AddCollaborationRequest, opts ...grpc.CallOption) (*AddCollaborationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCollaborationResponse)
	err := c.cc.Invoke(ctx, CollaborationService_AddCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) UpdateCollaboration(ctx context.Context, in *UpdateCollaborationRequest, opts ...grpc.CallOption) (*UpdateCollaborationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCollaborationResponse)
	err := c.cc.Invoke(ctx, CollaborationService_UpdateCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) DeleteCollaboration(ctx context.Context, in *DeleteCollaborationRequest, opts ...grpc.CallOption) (*DeleteCollaborationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollaborationResponse)
	err := c.cc.Invoke(ctx, CollaborationService_DeleteCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetCollaborationByNoteIdAndUserId(ctx context.Context, in *GetCollaborationByNoteIdAndUserIdRequest, opts ...grpc.CallOption) (*GetCollaborationByNoteIdAndUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollaborationByNoteIdAndUserIdResponse)
	err := c.cc.Invoke(ctx, CollaborationService_GetCollaborationByNoteIdAndUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetCollaborationByNoteId(ctx context.Context, in *GetCollaborationByNoteIdRequest, opts ...grpc.CallOption) (*GetCollaborationByNoteIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollaborationByNoteIdResponse)
	err := c.cc.Invoke(ctx, CollaborationService_GetCollaborationByNoteId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetCollaborationByUserId(ctx context.Context, in *GetCollaborationByUserIdRequest, opts ...grpc.CallOption) (*GetCollaborationByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollaborationByUserIdResponse)
	err := c.cc.Invoke(ctx, CollaborationService_GetCollaborationByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) CheckReadPermission(ctx context.Context, in *CheckReadPermissionRequest, opts ...grpc.CallOption) (*CheckReadPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckReadPermissionResponse)
	err := c.cc.Invoke(ctx, CollaborationService_CheckReadPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) CheckWritePermission(ctx context.Context, in *CheckWritePermissionRequest, opts ...grpc.CallOption) (*CheckWritePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckWritePermissionResponse)
	err := c.cc.Invoke(ctx, CollaborationService_CheckWritePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) RemoveCollaborationByNoteIdAndUserId(ctx context.Context, in *RemoveCollaborationByNoteIdAndUserIdRequest, opts ...grpc.CallOption) (*RemoveCollaborationByNoteIdAndUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCollaborationByNoteIdAndUserIdResponse)
	err := c.cc.Invoke(ctx, CollaborationService_RemoveCollaborationByNoteIdAndUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServiceServer is the server API for CollaborationService service.
// All implementations should embed UnimplementedCollaborationServiceServer
// for forward compatibility.
//
// Service definition
type CollaborationServiceServer interface {
	AddCollaboration(context.Context, *AddCollaborationRequest) (*AddCollaborationResponse, error)
	UpdateCollaboration(context.Context, *UpdateCollaborationRequest) (*UpdateCollaborationResponse, error)
	DeleteCollaboration(context.Context, *DeleteCollaborationRequest) (*DeleteCollaborationResponse, error)
	GetCollaborationByNoteIdAndUserId(context.Context, *GetCollaborationByNoteIdAndUserIdRequest) (*GetCollaborationByNoteIdAndUserIdResponse, error)
	GetCollaborationByNoteId(context.Context, *GetCollaborationByNoteIdRequest) (*GetCollaborationByNoteIdResponse, error)
	GetCollaborationByUserId(context.Context, *GetCollaborationByUserIdRequest) (*GetCollaborationByUserIdResponse, error)
	CheckReadPermission(context.Context, *CheckReadPermissionRequest) (*CheckReadPermissionResponse, error)
	CheckWritePermission(context.Context, *CheckWritePermissionRequest) (*CheckWritePermissionResponse, error)
	RemoveCollaborationByNoteIdAndUserId(context.Context, *RemoveCollaborationByNoteIdAndUserIdRequest) (*RemoveCollaborationByNoteIdAndUserIdResponse, error)
}

// UnimplementedCollaborationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollaborationServiceServer struct{}

func (UnimplementedCollaborationServiceServer) AddCollaboration(context.Context, *AddCollaborationRequest) (*AddCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) UpdateCollaboration(context.Context, *UpdateCollaborationRequest) (*UpdateCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) DeleteCollaboration(context.Context, *DeleteCollaborationRequest) (*DeleteCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) GetCollaborationByNoteIdAndUserId(context.Context, *GetCollaborationByNoteIdAndUserIdRequest) (*GetCollaborationByNoteIdAndUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborationByNoteIdAndUserId not implemented")
}
func (UnimplementedCollaborationServiceServer) GetCollaborationByNoteId(context.Context, *GetCollaborationByNoteIdRequest) (*GetCollaborationByNoteIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborationByNoteId not implemented")
}
func (UnimplementedCollaborationServiceServer) GetCollaborationByUserId(context.Context, *GetCollaborationByUserIdRequest) (*GetCollaborationByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborationByUserId not implemented")
}
func (UnimplementedCollaborationServiceServer) CheckReadPermission(context.Context, *CheckReadPermissionRequest) (*CheckReadPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReadPermission not implemented")
}
func (UnimplementedCollaborationServiceServer) CheckWritePermission(context.Context, *CheckWritePermissionRequest) (*CheckWritePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWritePermission not implemented")
}
func (UnimplementedCollaborationServiceServer) RemoveCollaborationByNoteIdAndUserId(context.Context, *RemoveCollaborationByNoteIdAndUserIdRequest) (*RemoveCollaborationByNoteIdAndUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollaborationByNoteIdAndUserId not implemented")
}
func (UnimplementedCollaborationServiceServer) testEmbeddedByValue() {}

// UnsafeCollaborationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationServiceServer will
// result in compilation errors.
type UnsafeCollaborationServiceServer interface {
	mustEmbedUnimplementedCollaborationServiceServer()
}

func RegisterCollaborationServiceServer(s grpc.ServiceRegistrar, srv CollaborationServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollaborationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollaborationService_ServiceDesc, srv)
}

func _CollaborationService_AddCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).AddCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_AddCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).AddCollaboration(ctx, req.(*AddCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_UpdateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).UpdateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_UpdateCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).UpdateCollaboration(ctx, req.(*UpdateCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_DeleteCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).DeleteCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_DeleteCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).DeleteCollaboration(ctx, req.(*DeleteCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetCollaborationByNoteIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborationByNoteIdAndUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetCollaborationByNoteIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetCollaborationByNoteIdAndUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetCollaborationByNoteIdAndUserId(ctx, req.(*GetCollaborationByNoteIdAndUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetCollaborationByNoteId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborationByNoteIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetCollaborationByNoteId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetCollaborationByNoteId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetCollaborationByNoteId(ctx, req.(*GetCollaborationByNoteIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetCollaborationByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborationByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetCollaborationByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetCollaborationByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetCollaborationByUserId(ctx, req.(*GetCollaborationByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_CheckReadPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReadPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).CheckReadPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_CheckReadPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).CheckReadPermission(ctx, req.(*CheckReadPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_CheckWritePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWritePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).CheckWritePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_CheckWritePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).CheckWritePermission(ctx, req.(*CheckWritePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_RemoveCollaborationByNoteIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollaborationByNoteIdAndUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).RemoveCollaborationByNoteIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_RemoveCollaborationByNoteIdAndUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).RemoveCollaborationByNoteIdAndUserId(ctx, req.(*RemoveCollaborationByNoteIdAndUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationService_ServiceDesc is the grpc.ServiceDesc for CollaborationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CollaborationService",
	HandlerType: (*CollaborationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCollaboration",
			Handler:    _CollaborationService_AddCollaboration_Handler,
		},
		{
			MethodName: "UpdateCollaboration",
			Handler:    _CollaborationService_UpdateCollaboration_Handler,
		},
		{
			MethodName: "DeleteCollaboration",
			Handler:    _CollaborationService_DeleteCollaboration_Handler,
		},
		{
			MethodName: "GetCollaborationByNoteIdAndUserId",
			Handler:    _CollaborationService_GetCollaborationByNoteIdAndUserId_Handler,
		},
		{
			MethodName: "GetCollaborationByNoteId",
			Handler:    _CollaborationService_GetCollaborationByNoteId_Handler,
		},
		{
			MethodName: "GetCollaborationByUserId",
			Handler:    _CollaborationService_GetCollaborationByUserId_Handler,
		},
		{
			MethodName: "CheckReadPermission",
			Handler:    _CollaborationService_CheckReadPermission_Handler,
		},
		{
			MethodName: "CheckWritePermission",
			Handler:    _CollaborationService_CheckWritePermission_Handler,
		},
		{
			MethodName: "RemoveCollaborationByNoteIdAndUserId",
			Handler:    _CollaborationService_RemoveCollaborationByNoteIdAndUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collaboration.proto",
}

const (
	NoteShareLinkService_CreateNoteShareLink_FullMethodName     = "/pb.NoteShareLinkService/CreateNoteShareLink"
	NoteShareLinkService_GetNoteShareLinkByID_FullMethodName    = "/pb.NoteShareLinkService/GetNoteShareLinkByID"
	NoteShareLinkService_GetNoteShareLinkByToken_FullMethodName = "/pb.NoteShareLinkService/GetNoteShareLinkByToken"
	NoteShareLinkService_UpdateNoteShareLink_FullMethodName     = "/pb.NoteShareLinkService/UpdateNoteShareLink"
	NoteShareLinkService_DeleteNoteShareLink_FullMethodName     = "/pb.NoteShareLinkService/DeleteNoteShareLink"
)

// NoteShareLinkServiceClient is the client API for NoteShareLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteShareLinkServiceClient interface {
	CreateNoteShareLink(ctx context.Context, in *CreateNoteShareLinkRequest, opts ...grpc.CallOption) (*CreateNoteShareLinkResponse, error)
	GetNoteShareLinkByID(ctx context.Context, in *GetNoteShareLinkByIDRequest, opts ...grpc.CallOption) (*GetNoteShareLinkResponse, error)
	GetNoteShareLinkByToken(ctx context.Context, in *GetNoteShareLinkByTokenRequest, opts ...grpc.CallOption) (*GetNoteShareLinkResponse, error)
	UpdateNoteShareLink(ctx context.Context, in *UpdateNoteShareLinkRequest, opts ...grpc.CallOption) (*UpdateNoteShareLinkResponse, error)
	DeleteNoteShareLink(ctx context.Context, in *DeleteNoteShareLinkRequest, opts ...grpc.CallOption) (*DeleteNoteShareLinkResponse, error)
}

type noteShareLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteShareLinkServiceClient(cc grpc.ClientConnInterface) NoteShareLinkServiceClient {
	return &noteShareLinkServiceClient{cc}
}

func (c *noteShareLinkServiceClient) CreateNoteShareLink(ctx context.Context, in *CreateNoteShareLinkRequest, opts ...grpc.CallOption) (*CreateNoteShareLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNoteShareLinkResponse)
	err := c.cc.Invoke(ctx, NoteShareLinkService_CreateNoteShareLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteShareLinkServiceClient) GetNoteShareLinkByID(ctx context.Context, in *GetNoteShareLinkByIDRequest, opts ...grpc.CallOption) (*GetNoteShareLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoteShareLinkResponse)
	err := c.cc.Invoke(ctx, NoteShareLinkService_GetNoteShareLinkByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteShareLinkServiceClient) GetNoteShareLinkByToken(ctx context.Context, in *GetNoteShareLinkByTokenRequest, opts ...grpc.CallOption) (*GetNoteShareLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoteShareLinkResponse)
	err := c.cc.Invoke(ctx, NoteShareLinkService_GetNoteShareLinkByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteShareLinkServiceClient) UpdateNoteShareLink(ctx context.Context, in *UpdateNoteShareLinkRequest, opts ...grpc.CallOption) (*UpdateNoteShareLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNoteShareLinkResponse)
	err := c.cc.Invoke(ctx, NoteShareLinkService_UpdateNoteShareLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteShareLinkServiceClient) DeleteNoteShareLink(ctx context.Context, in *DeleteNoteShareLinkRequest, opts ...grpc.CallOption) (*DeleteNoteShareLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNoteShareLinkResponse)
	err := c.cc.Invoke(ctx, NoteShareLinkService_DeleteNoteShareLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteShareLinkServiceServer is the server API for NoteShareLinkService service.
// All implementations should embed UnimplementedNoteShareLinkServiceServer
// for forward compatibility.
type NoteShareLinkServiceServer interface {
	CreateNoteShareLink(context.Context, *CreateNoteShareLinkRequest) (*CreateNoteShareLinkResponse, error)
	GetNoteShareLinkByID(context.Context, *GetNoteShareLinkByIDRequest) (*GetNoteShareLinkResponse, error)
	GetNoteShareLinkByToken(context.Context, *GetNoteShareLinkByTokenRequest) (*GetNoteShareLinkResponse, error)
	UpdateNoteShareLink(context.Context, *UpdateNoteShareLinkRequest) (*UpdateNoteShareLinkResponse, error)
	DeleteNoteShareLink(context.Context, *DeleteNoteShareLinkRequest) (*DeleteNoteShareLinkResponse, error)
}

// UnimplementedNoteShareLinkServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoteShareLinkServiceServer struct{}

func (UnimplementedNoteShareLinkServiceServer) CreateNoteShareLink(context.Context, *CreateNoteShareLinkRequest) (*CreateNoteShareLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoteShareLink not implemented")
}
func (UnimplementedNoteShareLinkServiceServer) GetNoteShareLinkByID(context.Context, *GetNoteShareLinkByIDRequest) (*GetNoteShareLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteShareLinkByID not implemented")
}
func (UnimplementedNoteShareLinkServiceServer) GetNoteShareLinkByToken(context.Context, *GetNoteShareLinkByTokenRequest) (*GetNoteShareLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteShareLinkByToken not implemented")
}
func (UnimplementedNoteShareLinkServiceServer) UpdateNoteShareLink(context.Context, *UpdateNoteShareLinkRequest) (*UpdateNoteShareLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteShareLink not implemented")
}
func (UnimplementedNoteShareLinkServiceServer) DeleteNoteShareLink(context.Context, *DeleteNoteShareLinkRequest) (*DeleteNoteShareLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteShareLink not implemented")
}
func (UnimplementedNoteShareLinkServiceServer) testEmbeddedByValue() {}

// UnsafeNoteShareLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteShareLinkServiceServer will
// result in compilation errors.
type UnsafeNoteShareLinkServiceServer interface {
	mustEmbedUnimplementedNoteShareLinkServiceServer()
}

func RegisterNoteShareLinkServiceServer(s grpc.ServiceRegistrar, srv NoteShareLinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedNoteShareLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NoteShareLinkService_ServiceDesc, srv)
}

func _NoteShareLinkService_CreateNoteShareLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteShareLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteShareLinkServiceServer).CreateNoteShareLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteShareLinkService_CreateNoteShareLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteShareLinkServiceServer).CreateNoteShareLink(ctx, req.(*CreateNoteShareLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteShareLinkService_GetNoteShareLinkByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteShareLinkByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteShareLinkServiceServer).GetNoteShareLinkByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteShareLinkService_GetNoteShareLinkByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteShareLinkServiceServer).GetNoteShareLinkByID(ctx, req.(*GetNoteShareLinkByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteShareLinkService_GetNoteShareLinkByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteShareLinkByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteShareLinkServiceServer).GetNoteShareLinkByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteShareLinkService_GetNoteShareLinkByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteShareLinkServiceServer).GetNoteShareLinkByToken(ctx, req.(*GetNoteShareLinkByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteShareLinkService_UpdateNoteShareLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteShareLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteShareLinkServiceServer).UpdateNoteShareLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteShareLinkService_UpdateNoteShareLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteShareLinkServiceServer).UpdateNoteShareLink(ctx, req.(*UpdateNoteShareLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteShareLinkService_DeleteNoteShareLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteShareLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteShareLinkServiceServer).DeleteNoteShareLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteShareLinkService_DeleteNoteShareLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteShareLinkServiceServer).DeleteNoteShareLink(ctx, req.(*DeleteNoteShareLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteShareLinkService_ServiceDesc is the grpc.ServiceDesc for NoteShareLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteShareLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NoteShareLinkService",
	HandlerType: (*NoteShareLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNoteShareLink",
			Handler:    _NoteShareLinkService_CreateNoteShareLink_Handler,
		},
		{
			MethodName: "GetNoteShareLinkByID",
			Handler:    _NoteShareLinkService_GetNoteShareLinkByID_Handler,
		},
		{
			MethodName: "GetNoteShareLinkByToken",
			Handler:    _NoteShareLinkService_GetNoteShareLinkByToken_Handler,
		},
		{
			MethodName: "UpdateNoteShareLink",
			Handler:    _NoteShareLinkService_UpdateNoteShareLink_Handler,
		},
		{
			MethodName: "DeleteNoteShareLink",
			Handler:    _NoteShareLinkService_DeleteNoteShareLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collaboration.proto",
}
